.TH "VMENU" "1" "February 15, 2016" "Vmenu User Manuals" ""
.SH NAME
.PP
vmenu \- create x menus from the shell to run commands
.SH SYNOPSIS
.PP
vmenu [\f[I]OPTION\f[]]...
<\f[I]MENUITEM\f[]> <\f[I]COMMAND\f[]>...
.PP
vmenu [\f[I]OPTION\f[]]...
{\f[B]\-d\f[]\f[I]::\f[]|\f[B]\-\-delimiter\f[] \f[I]::\f[]}
\f[I]MENUITEM::COMMAND\f[] ...
.SH DESCRIPTION
.PP
\f[B]Vmenu\f[] is a simple program that accepts a list of MENUITEM and
COMMAND pairs on the command line.
It creates a X window that consists of nothing but a menu.
When a particular MENUITEM is selected by the user, the corresponding
COMMAND is executed or (using \f[I]\-\-print\f[]) printed on standard
output.
.PP
Menu items and commands may either be given separately using two
arguments for each menu option, or, optionally you may specify a
delimiter (using \f[I]\-\-delimiter\f[]) and specify both menu item and
command in the same argument.
The delimiter may be of any length.
.PP
If the command is omitted (or if an empty command is supplied when not
using \f[I]\-\-delimiter\f[]) then the menu item text will be used as
the command.
.SH OPTIONS
.PP
Some options may be specified using X resources, allowing you to define
some defaults you like in your in your \f[I]~/.Xresources\f[] file.
.PP
\f[B]vmenu\f[]\[aq]s default resource class is the name of the executed
file, either \f[B]vmenu\f[] or, if the executable was called through a
link, the name of the link in question.
The command line option \f[I]\-\-class\f[] may be used to override the
default X resource class name.
.TP
.B \f[B]\-\-align\f[] \f[I]{left|center|right}\f[] (X resource: \f[B]align\f[])
Aligns the text of the menu entries to the \f[B]left\f[],
\f[B]center\f[] or \f[B]right\f[].
Defaults to \f[B]left\f[].
(Short options \f[B]\-l\f[], \f[B]\-c\f[] and \f[B]\-r\f[] may also be
used for \f[B]left\f[], \f[B]center\f[] and \f[B]right\f[]
respectively.)
.RS
.RE
.TP
.B \f[B]\-b\f[], \f[B]\-\-back\f[] \f[I]PREVMENU\f[]
Run command PREVMENU when user goes back in the menu hierarchy.
Useful when using nested menus; it gives the user a way to back out and
return to the previous menu.
Note that you can use this option for other things too.
The command specified by the \f[B]\-\-back\f[] option is executed when
the user hits one of the "back" keys.
.RS
.RE
.TP
.B \f[B]\-\-background\f[] \f[I]BGCOLOR\f[] (X resource: \f[B]background\f[])
Set the background color to BGCOLOR.
By default, the background color is black.
BGCOLOR may be the name of any color accepted by your X server.
.RS
.RE
.TP
.B \f[B]\-C\f[], \f[B]\-\-class\f[] \f[I]CLASSNAME\f[]
This option allows you to override \f[B]vmenu\f[]\[aq]s resource class.
Normally it is "vmenu".
.RS
.RE
.TP
.B \f[B]\-\-debug\f[]
Makes \f[B]vmenu\f[] talk quite a lot on standard error.
.RS
.RE
.TP
.B \f[B]\-d\f[], \f[B]\-\-delimiter\f[] \f[I]DELIM\f[]
This changes the behaviour when parsing subsequent menuitem/command
pairs.
.RS
.PP
Normally the command line arguments are taken to be alternately menu
items and their related commands, thus requiring an even number of
arguments to be passed to \f[B]vmenu\f[].
(If a command is given as "" it is taken to be the same as the menu
item.) This behaviour can make it somewhat difficult to distinguish
between menu item arguments and command arguments in cases where the
menu grow quite big (e.g.
in a script).
Therefore an alternative is provided...
.PP
If you specify a delimiter (using \f[B]\-\-delimiter\f[]) this behaviour
is changed and the menu item and command are both expected to occur in
the same argument, separated by whatever delimiter you\[aq]ve specified.
This makes the command line easier to read (for a human) but is
sometimes disadvantageous, especially in autogenerated menus, since the
delimiter in question cannot occur in the menu item text.
(See also "EXAMPLES" below.)
.RE
.TP
.B \f[B]\-D\f[], \f[B]\-\-display\f[] \f[I]DISPLAYNAME\f[]
Use the X display DISPLAYNAME, instead of the default display.
Normally you won\[aq]t need to use this.
.RS
.RE
.TP
.B \f[B]\-\-foreground\f[] \f[I]FGCOLOR\f[] (X resource: \f[B]foreground\f[])
Set the foreground color to FGCOLOR.
By default, the foreground color is black.
FGCOLOR may be the name of any color accepted by your X server.
.RS
.RE
.TP
.B \f[B]\-F\f[], \f[B]\-\-font\f[] \f[I]FONTNAME\f[] (X resource: \f[B]font\f[])
Use the font FONTNAME instead of the default font.
.RS
.RE
.TP
.B \f[B]\-h\f[], \f[B]\-\-help\f[]
Output a brief help message.
.RS
.RE
.PP
\f[B]\-\-mouse\f[] (X resource: \f[B]mouse\f[])
.TP
.B \f[B]\-\-no\-mouse\f[]
Enable/disable mouse support in \f[B]vmenu\f[].
The mouse support is quite limited (you can\[aq]t scroll a large menu
using the mouse) and is only intended for those moments when you
instinctively want to click on something you see in order to select it.
See also MOUSE SUPPORT.
.RS
.PP
Use vmenu.mouse: false (or \f[C]no\[aq]\ or\f[]off\[aq]) in your X
resource file to disable mouse support as a default, and vmenu.mouse:
true (or \f[C]yes\[aq]\ or\f[]on) to enable it.
.RE
.TP
.B \f[B]\-i\f[], \f[B]\-\-item\f[] \f[I]POSITION\f[]
Pre\-select menu item number POSITION, instead of the first menu item,
upon opening the menu.
Menu items are numbered from 1.
This is sometimes useful in scripts.
.RS
.PP
If POSITION is 0, then no item is selected initially.
Going up one item will make the menu jump to the last item, going down
will jump to the first item.
Pressing enter while no item is selected is the same as aborting.
There is no way to zero entries, other than this, so if you move about
you cannot return to the state where no item is selected (but why should
you ever want that?).
.PP
The described behavior is useful when the initially selected item
denotes a
\f[C]current\[aq]\ value\ (useful\ when\ called\ from\ a\ script)\ and\ the\ absence\ of\ a\ selected\ item\ may\ be\ used\ to\ indicate\ that\ there\ is\ no\ such\f[]current\[aq]
value.
.RE
.TP
.B \f[B]\-p\f[], \f[B]\-\-print\f[]
Prints the COMMAND associated with the selected MENUITEM on standard
output instead of running it.
.RS
.PP
Using this option you can use a menu for all kinds of selections, and
not only for running a program.
When using this option COMMAND no longer need to be a valid command at
all \-\- any string will work.
See also "EXAMPLES" below.
.RE
.TP
.B \f[B]\-o\f[], \f[B]\-\-scroll\-offset\f[] \f[I]ITEMS\f[] (X resource: \f[B]scrollOffset\f[])
If a menu is too large to fit in one window, it will become scrollable.
\f[B]vmenu\f[] will try to keep at least ITEMS number of items between
the current position and the top or bottom of the menu.
If you get closer than this, the menu will scroll.
As you get close to the top or bottom of the menu scrolling will cease.
(Default scroll offset is 3.)
.RS
.PP
Scroll offset may not be larger than half of the menu.
If it is it will be cut down to that value.
.RE
.TP
.B \f[B]\-S\f[], \f[B]\-\-shell\f[] \f[I]PROG\f[]
Use \f[I]PROG\f[] as the shell to run commands, instead of
\f[B]/bin/sh\f[].
A popular alternative shell is rc(1).
If the shell cannot be executed, \f[B]vmenu\f[] will silently fall back
to using \f[B]/bin/sh\f[].
.RS
.RE
.TP
.B \f[B]\-s\f[], \f[B]\-\-style\f[] \f[I]{snazzy|dreary}\f[] (X resource: \f[B]style\f[])
The default style is \f[B]dreary\f[], where the highlight bar moves up
and down the menu as it does on all conventional keyboard controlled
menus.
In \f[B]dreary\f[] mode, the highlight bar, which shows the currently
selected item, remains stationary while all the menu items are rotated
up or down when the cursor keys are moved.
.RS
.RE
.TP
.B \f[B]\-t\f[], \f[B]\-\-title\f[] \f[I]NAME\f[]
Change the title of the menu window to NAME.
The default title is the last component of the path used to run
\f[B]vmenu\f[], typically, "vmenu".
.RS
.RE
.PP
\f[B]\-\-unfocus\-exit\f[] (X resource: \f[B]unfocusExit\f[])
.TP
.B \f[B]\-\-no\-unfocus\-exit\f[]
FIXME: Currently a `BadWindow\[aq] error message is generated by X when
the current instance of \f[B]vmenu\f[] dies of unfocus.
Does anyone know how to fix this?
.RS
.PP
\f[B]\-\-unfocus\-exit\f[] causes \f[B]vmenu\f[] to die (without any
option being selected) if its window loses focus (it\[aq]s probably not
a good to use in combination with a window manager that automatically
focuses the window under your pointer).
.PP
\f[B]\-\-no\-unfocus\-exit\f[] makes \f[B]vmenu\f[] survive unfocusing.
This can be confusing in some cases as it makes it possible to have
start several menus at once (normally the previous menu would die from
unfocus).
.PP
Use vmenu.unfocusExit: false (or \f[C]no\[aq]\ or\f[]off\[aq]) in your X
resource file to disable unfocus deaths as a default, and
vmenu.unfocusExit: true (or \f[C]yes\[aq]\ or\f[]on) to enable it.
.RE
.TP
.B \f[B]\-V\f[], \f[B]\-\-version\f[]
This option prints the version of vmenu on the standard output, and then
exits with an exit value of zero.
.RS
.RE
.SH KEYSTROKES
.PP
The \f[B]Up\f[] keystrokes move the selection to the next item up.
The \f[B]Down\f[] keystrokes move the selection to the next item down.
When the selection reaches the top or bottom, it scrolls around to the
other side on pressing of the appropriate keystroke.
The \f[B]Select\f[] keystrokes execute the command corresponding to the
currently selected menu item, and exit vmenu.
The \f[B]Back\f[] keystrokes does nothing unless the \f[B]\-\-back\f[]
option was used, in which case it will run the command specified by that
option and exit vmenu.
The \f[B]Exit\f[] keystrokes quit vmenu without doing anything.
.IP
.nf
\f[C]
Up\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "k",\ Up_arrow,\ BackSpace,\ "\-"
Down\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "j",\ Down_arrow,\ Space,\ Tab,\ "+"
Select\ \ \ \ \ \ \ \ \ \ \ \ \ \ "l",\ Right_arrow,\ Return
Back\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "h",\ Left_arrow
Exit\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "q",\ Escape
Half\ page\ down\ \ \ \ \ \ CTRL\-D
Half\ page\ up\ \ \ \ \ \ \ \ CTRL\-U
One\ page\ down\ \ \ \ \ \ \ CTRL\-F
One\ page\ up\ \ \ \ \ \ \ \ \ CTRL\-B
First\ entry\ \ \ \ \ \ \ \ \ "g"
Last\ entry\ \ \ \ \ \ \ \ \ \ "G"
Top\ line\ \ \ \ \ \ \ \ \ \ \ \ "H"
Middle\ line\ \ \ \ \ \ \ \ \ "M"
Bottom\ line\ \ \ \ \ \ \ \ \ "L"
\f[]
.fi
.SH MOUSE SUPPORT
.PP
\f[B]vmenu\f[] implements limited support for the rodent, you may select
an item (left), go to any previous menu, given by \f[B]\-\-back\f[],
(right) or abort the menu (any other; usually middle).
The mouse cannot be used to scroll the menu.
.PP
Your rodent won\[aq]t interfere with the normal operation.
If you place the pointer on the menu by mistake, simply move it outside
of the menu to restore the selection.
You may, however, use the keys to manipulate an entry selected with the
mouse, in this case the key based selection sticks.
.PP
Actions are performed upon releasing a mouse button.
To cancel an action after the button has been pressed, move it outside
the menu window and release the button (this goes for all the buttons).
.SH EXAMPLES
.PP
Prompt a program to execute:
.IP
.nf
\f[C]
\ \ \ \ vmenu\ "firefox"\ firefox\ "terminal"\ urxvt\ "gimp"\ gimp
\f[]
.fi
.PP
equivalent to:
.IP
.nf
\f[C]
\ \ \ \ vmenu\ \-d:\ "firefox":firefox\ "terminal":urxvt\ "gimp":gimp
\f[]
.fi
.SS Shell scripts
.PP
You can prompt for options in shell scripts using \f[B]vmenu\f[] like
this:
.IP
.nf
\f[C]
choice=`vmenu\ \-pd:\ Accept\ Cancel\ Ignore`
\f[]
.fi
.PP
Now any of the options selected will be put into the variable
\f[I]$choice\f[] (note, though, that this may also be empty if the user
cancelled the menu).
Here \f[B]\-p\f[] option is used to print the selected COMMAND to
standard out instead of running it, and \f[B]\-d\f[] is used simply to
avoid having to fill out the command line with a lot of ugly \f[I]""\f[]
arguments.
You could, of course, replace the colon in the command line with any
character that you don\[aq]t use in the menu.
.PP
A dynamic menu can be generated like this:
.IP
.nf
\f[C]
\ \ \ \ vmenu_cmd="vmenu\ \-\-title\ menu\ \-pd:\ "
\ \ \ \ for\ i\ in\ `seq\ 10`
\ \ \ \ do
\ \ \ \ \ \ \ \ vmenu_cmd+="option\ $1"
\ \ \ \ done
\ \ \ \ selected_option=`eval\ $vmenu_cmd`
\f[]
.fi
.PP
This will generate a menu with 10 options of the form \f[I]option X\f[];
the selected one will be available in the \f[I]selected_option\f[]
variable.
.SH SEE ALSO
.PP
\f[I]/etc/X11/rgb.txt\f[] where you may find the names of appropriate
colours to use with the \f[B]\-\-background\f[] and
\f[B]\-\-forground\f[] options and X resources.
.SH AUTHORS
.PP
The initial idea for this program was by Arnold Robbins, after having
worked with John Mackin\[aq]s GWM Blit emulation.
Matty Farrow wrote a version using libXg, from which some ideas were
borrowed.
The ratmen code was written by David Hogan and Arnold Robbins.
Rich Salz motivated the \f[B]\-shell\f[] option.
Jonathan Walther modified this code to play nicely with the ratpoison
window manager by removing handling of mouse events and iconification.
The \f[B]vmenu\f[] fork was created to clean some code and add vi\-like
movements and extra functionality.
.PP
Zrajm C Akfogh <vmenu-mail@klingonska.org> changed command line syntax
into the more standard getopts, added scrolling capacity if menu is to
large to fit all at once, added \f[B]\-\-delimiter\f[],
\f[B]\-\-item\f[], \f[B]\-\-print\f[], \f[B]\-\-scroll\-offset\f[] and
\f[B]\-\-unfocus\-exit\f[] options and X resource support.
.PP
\f[B]vmenu\f[] makes reference to \[aq]vi\-like\[aq] as it tries to be
more natural for vi users.
Is heavily derived from ratmen, which is derived from ratmenu.
.SH AUTHORS
Daniel Campoverde.
